#!/usr/bin/env python


#PROBLEM
#==============
#A graph whose nodes have all been labeled can be represented by an adjacency list, in which each row of the list contains the two node labels 
#corresponding to a unique edge.

#A directed graph (or digraph) is a graph containing directed edges, each of which has an orientation. That is, a directed edge is represented by an 
#arrow instead of a line segment; the starting and ending nodes of an edge form its tail and head, respectively. The directed edge with tail v and head w 
#is represented by (v,w) (but not by (w,v)). A directed loop is a directed edge of the form (v,v).
#For a collection of strings and a positive integer k, the overlap graph for the strings is a directed graph Ok in which each string is represented by a node, 
#and string s is connected to string t with a directed edge when there is a length k suffix of s that matches a length k prefix of t, as long as s≠t; 
#we demand s≠t to prevent directed loops in the overlap graph (although directed cycles may be present).

#Given: A collection of DNA strings in FASTA format having total length at most 10 kbp.
#Return: The adjacency list corresponding to O3. You may return edges in any order.

#Sample Dataset
#>Rosalind_0498
#AAATAAA
#>Rosalind_2391
#AAATTTT
#>Rosalind_2323
#TTTTCCC
#>Rosalind_0442
#AAATCCC
#>Rosalind_5013
#GGGTGGG
#Sample Output
#Rosalind_0498 Rosalind_2391
#Rosalind_0498 Rosalind_0442
#Rosalind_2391 Rosalind_2323


def main():
    file_name = get_file_name()
    dictio = create_dict(file_name)
    subnetw  = break_by_k(dictio)
    get_netw = adjacency(dictio, subnetw)
    print(get_netw)

def get_file_name():
    x = input("What is the file name? (format file_name.txt): ")
    return x

def create_dict(file_name):
    dictio = {}
    raw_file  = open(file_name, "r")
    line = raw_file.readline()
    while line !="":
        if "R" in line:
            line = line.replace("\n", "")
            line = line.replace(">", "")
            key = line
            dictio[key] = 0
        else:
            linex = line.rstrip("\n")
            linet  = linex + raw_file.readline() 
            linet = linet.replace("\n", "")
            value = linet
            dictio[key] = value
            
        line = raw_file.readline()

    print(dictio)

    return dictio

def break_by_k(raw_network):
    subnetw = {}
    for key in raw_network:
        subnetw[key] = (raw_network[key])[-3:]
    print(subnetw)
    return subnetw

def adjacency(network, subnetw):
    
    for i, x in network.items():
        for j, y in subnetw.items():
            if x.startswith(y) and  i != j:
                print(j, i)
            
main()
