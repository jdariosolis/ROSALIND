#!/usr/bin/env python


#PROBLEM
#============

#For a random variable X taking integer values between 1 and n, the expected value of X is E(X)=∑nk=1k×Pr(X=k). 
#The expected value offers us a way of taking the long-term average of a random variable over a large number of trials.

#As a motivating example, let X be the number on a six-sided die. Over a large number of rolls, we should expect to obtain an average of 3.5 on the die 
#(even though it's not possible to roll a 3.5). The formula for expected value confirms that E(X)=∑6k=1k×Pr(X=k)=3.5.

#More generally, a random variable for which every one of a number of equally spaced outcomes has the same probability is called a uniform random variable 
#(in the die example, this "equal spacing" is equal to 1). We can generalize our die example to find that if X is a uniform random variable with minimum 
#possible value a and maximum possible value b, then E(X)=a+b2. You may also wish to verify that for the dice example, if Y is the random variable 
#associated with the outcome of a second die roll, then E(X+Y)=7.

#Given: Six nonnegative integers, each of which does not exceed 20,000. The integers correspond to the number of couples in a population possessing each genotype pairing for a given factor. In order, the six given integers represent the number of couples having the following genotypes:

#AA-AA
#AA-Aa
#AA-aa
#Aa-Aa
#Aa-aa
#aa-aa
#Return: The expected number of offspring displaying the dominant phenotype in the next generation, under the assumption that every couple has exactly two offspring.

#Sample Dataset
#1 0 0 1 0 1
#Sample Output
#3.5


#==========
#CODE


def main():
    g1 = get_genotype1()
    g2 = get_genotype2()
    g3 = get_genotype3()
    g4 = get_genotype4()
    g5 = get_genotype5()
    g6 = get_genotype6()
    total_pop  = get_pop(g1, g2, g3, g4, g5, g6)
    dom_allele = get_prob_dom(g1, g2, g3, g4, g5, g6, total_pop)
    print(dom_allele)
def get_genotype1():
    couple1 = int(input("Enter number of couples with genotype AA-AA: "))
    return couple1
def get_genotype2():
    couple2 = int(input("Enter number of couples with genotype AA-Aa: "))
    return couple2
def get_genotype3():
    couple3 = int(input("Enter number of couples with genotype AA-aa: "))
    return couple3
def get_genotype4():
    couple4 = int(input("Enter number of couples with genotype Aa-Aa: "))
    return couple4
def get_genotype5():
    couple5 = int(input("Enter number of couples with genotype Aa-aa: "))
    return couple5
def get_genotype6():
    couple6 = int(input("Enter number of couples with genotype aa-aa: "))
    return couple6

def get_pop(g1, g2, g3, g4, g5, g6):
    total_pop = int(g1 +  g2 + g3 + g4 + g5 + g6)
    return total_pop

def get_prob_dom(g1, g2, g3, g4, g5, g6, total_pop):
    prob = (2*(g1 + g2 + g3 + ((3/4)*g4) + ((1/2)*g5)))
    return prob

main()
