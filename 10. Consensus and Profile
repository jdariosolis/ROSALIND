#!/usr/bin/env python

#PROBLEM
#================
#A matrix is a rectangular table of values divided into rows and columns. An m×n matrix has m rows and n columns. Given a matrix A, we write Ai,j to indicate 
#the value found at the intersection of row i and column j.

#Say that we have a collection of DNA strings, all having the same length n. Their profile matrix is a 4×n matrix P in which P1,j represents the number of 
#times that 'A' occurs in the jth position of one of the strings, P2,j represents the number of times that C occurs in the jth position, and so on (see below).

#A consensus string c is a string of length n formed from our collection by taking the most common symbol at each position; the jth symbol of c therefore 
#corresponds to the symbol having the maximum value in the j-th column of the profile matrix. Of course, there may be more than one most common symbol, 
#leading to multiple possible consensus strings.

#DNA Strings	
#A T C C A G C T
#G G G C A A C T
#A T G G A T C T
#A A G C A A C C
#T T G G A A C T
#A T G C C A T T
#A T G G C A C T
#Profile
#A   5 1 0 0 5 5 0 0
#C   0 0 1 4 2 0 6 1
#G   1 1 6 3 0 1 0 0
#T   1 5 0 0 0 1 1 6
#Consensus	A T G C A A C T

#Given: A collection of at most 10 DNA strings of equal length (at most 1 kbp) in FASTA format.
#Return: A consensus string and profile matrix for the collection. (If several possible consensus strings exist, then you may return any one of them.)

#Sample Dataset
#>Rosalind_1
#ATCCAGCT
#>Rosalind_2
#GGGCAACT
#>Rosalind_3
#ATGGATCT
#>Rosalind_4
#AAGCAACC
#>Rosalind_5
#TTGGAACT
#>Rosalind_6
#ATGCCATT
#>Rosalind_7
#ATGGCACT
#Sample Output
#ATGCAACT
#A: 5 1 0 0 5 5 0 0
#C: 0 0 1 4 2 0 6 1
#G: 1 1 6 3 0 1 0 0
#T: 1 5 0 0 0 1 1 6

#================

#CODE


#Parse files using Biopython

from Bio import SeqIO
file_name = input("Enter your file name (format file_name.fasta): ")

a_list=[]
c_list=[]
g_list=[]
t_list=[]

for seq_record in SeqIO.parse(file_name, "fasta"):
    x = len(seq_record)

#Create arrays of 0 for a, c, g and t of length len(sequence) (all sequences are the same length)
for n in range(0, x):
    a_list.append(0)
    c_list.append(0)
    g_list.append(0)
    t_list.append(0)

#If nt=nt, add +1 to the list
for seq_record in SeqIO.parse(file_name, "fasta"):
    count = 0
    for nt in seq_record:
        if nt == "A":
            a_list[count] = a_list[count]+1
        elif nt == "C":
            c_list[count] = c_list[count]+1
        elif nt == "G":
            g_list[count] = g_list[count]+1
        elif nt == "T":
            t_list[count] = t_list[count]+1
        count +=1


counter = 0
consensus=[]

#Compare nth element of the 4 lists, get the most common one and append it to the consensus sequence
for x in range(0, len(a_list)):
    
    if a_list[counter] >= c_list[counter] and a_list[counter] >= g_list[counter] and a_list[counter] >= t_list[counter]:
        consensus.append("A")
    elif c_list[counter] >= g_list[counter] and c_list[counter] >= t_list[counter]:
        consensus.append("C")
    elif g_list[counter] >= t_list[counter]:
        consensus.append("G")
    else:
        consensus.append("T")
    counter +=1

#Open and write to a .txt file

f = open("rosalind_answer.txt", "a")

for element in consensus:
    f.write(element)

f.write("\n")
f.write("A: ")

for number in a_list:
    f.write(str(number))
    f.write(" ")

f.write("\n")
f.write("C: ")

for number in c_list:
    f.write(str(number))
    f.write(" ")

f.write("\n")
f.write("G: ")

for number in g_list:
    f.write(str(number))
    f.write(" ")

f.write("\n")
f.write("T: ")

for number in t_list:
    f.write(str(number))
    f.write(" ")

f.close()
